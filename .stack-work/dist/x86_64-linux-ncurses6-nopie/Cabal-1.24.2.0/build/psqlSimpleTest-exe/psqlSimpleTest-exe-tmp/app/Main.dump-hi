
==================== FINAL INTERFACE ====================
2017-09-05 19:24:24.507467028 UTC

interface main@main:Main 8002
  interface hash: 611ee4db9d12158bdbc31ba76155f9ef
  ABI hash: 6ece9f416ff026daebc69ff3f87c85c0
  export-list hash: 01973464736e5f474fdd88f34c1e1bfa
  orphan hash: e973cb0a17ac1f1642c11a6c1135e07b
  flag hash: 437d26bbba2eaaa26912ecc4f7d1d255
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addVarcharInt
  Main.main
  Main.VarcharInt{Main.VarcharInt ai avc}
  Main.VarcharIntDate{Main.VarcharIntDate d i vc}
module dependencies:
package dependencies: OneTuple-0.2.1@OneTuple-0.2.1-7xFCZYYP3bD3K0JO3QlNLg
                      aeson-1.1.2.0@aeson-1.1.2.0-H8KqCgI8gcq2RuIUkNEZvK
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-unicode-symbols-0.2.2.4@base-unicode-symbols-0.2.2.4-GJVqB7ZApypLPm9xi9vicw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      containers-0.5.7.1@containers-0.5.7.1
                      dates-0.2.2.1@dates-0.2.2.1-CkuqFC9eWcICV7SpzscDBX
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      postgresql-libpq-0.9.3.1@postgresql-libpq-0.9.3.1-PNtzTLZ1kPBlp0W2VWiJp
                      postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      psqlSimpleTest-0.1.0.0@psqlSimpleTest-0.1.0.0-3XcZjC3DJFu1T3gR6T23Oi
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.1@scientific-0.3.5.1-JHsAAp34Yyd8e5v3sK3O5Q
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      tuple-0.3.0.2@tuple-0.3.0.2-fw19c2mVE4S4kTOAA0LW
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  dates-0.2.2.1@dates-0.2.2.1-CkuqFC9eWcICV7SpzscDBX:Data.Dates 8b96ea41150c88affb2bd98cc06e3bd8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple b128170273d65e85053f89a932f420ed
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.FromRow 11d5f7c59301a8ed35f14db6bb3b6421
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.Internal c2115165a231711f212cf2bac64f6807
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.Time 19c35fa7ea0684e88757bff605dde7c9
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.Time.Implementation 5430f99071050a9804eb2325066f7478
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.ToField 1c42301a7cc6028ce12397109ac9d514
import  -/  postgresql-simple-0.5.3.0@postgresql-simple-0.5.3.0-CikGkVyRqLmCtr37RZVlln:Database.PostgreSQL.Simple.ToRow 2d179280fb21e31d0acc8d3fcd6aa0ab
import  -/  psqlSimpleTest-0.1.0.0@psqlSimpleTest-0.1.0.0-3XcZjC3DJFu1T3gR6T23Oi:Lib 874ece6aa7612ea8cb1ad8953e4ebdf4
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock ecc8b7f9ffb2bf483684ff7090f3df6a
import  -/  tuple-0.3.0.2@tuple-0.3.0.2-fw19c2mVE4S4kTOAA0LW:Data.Tuple.Select 405e4c165e81b4fa47e7a29436c65100
719fe0303c7cdbfc069be9fb180376b7
  $fFromRowVarcharIntDate ::
    Database.PostgreSQL.Simple.FromRow.FromRow Main.VarcharIntDate
  DFunId
  {- Arity: 4,
     Strictness: <S(SS(SL)),1*U(U,U(U,U))><S(S),1*U(U)><L,U(U,U,U)><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromRowVarcharIntDate_$cfromRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.FromRow.N:FromRow[0]) <Main.VarcharIntDate>_N) -}
719fe0303c7cdbfc069be9fb180376b7
  $fFromRowVarcharIntDate1 ::
    Database.PostgreSQL.Simple.Internal.Row
    -> Database.PostgreSQL.LibPQ.Column
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 4,
     Strictness: <S(SS(SL)),1*U(U,U(U,U))><S(S),1*U(U)><L,U(U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w4 :: Database.PostgreSQL.Simple.Internal.Row)
                   (w5 :: Database.PostgreSQL.LibPQ.Column)
                   (w6 :: Database.PostgreSQL.Simple.Internal.Connection)
                   (w7 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w4 of ww { Database.PostgreSQL.Simple.Internal.Row ww1 ww2 ->
                 case ww2
                        `cast`
                      (Database.PostgreSQL.LibPQ.N:Result[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case w5
                        `cast`
                      (Trans
                           (Database.PostgreSQL.LibPQ.N:Column[0])
                           (Foreign.C.Types.N:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                 Main.$w$cfromRow ww1 ww4 ww5 ww7 w6 w7 } } }) -}
1746a3db3400044ff53ec8efad3fcda2
  $fFromRowVarcharIntDate2 ::
    Database.PostgreSQL.Simple.Internal.Field
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Base.Maybe GHC.Types.Int)
  {- Arity: 2, Strictness: <L,U(U(U,U),U,U)><S,1*U>,
     Unfolding: (\ (eta :: Database.PostgreSQL.Simple.Internal.Field)
                   (eta1 :: GHC.Base.Maybe Data.ByteString.Internal.ByteString) ->
                 case eta1 of wild {
                   GHC.Base.Nothing
                   -> (Database.PostgreSQL.Simple.FromField.$fFromFieldMaybe1
                         @ GHC.Types.Int)
                        `cast`
                      (Trans
                           (<Database.PostgreSQL.Simple.Internal.Connection>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Database.PostgreSQL.Simple.Ok.Ok
                                             (GHC.Base.Maybe GHC.Types.Int)>_R))
                           (Sym (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                     <GHC.Base.Maybe GHC.Types.Int>_R)))
                   GHC.Base.Just ds
                   -> let {
                        m :: Database.PostgreSQL.Simple.Internal.Conversion GHC.Types.Int
                        = Database.PostgreSQL.Simple.FromField.$fFromFieldInt_$cfromField
                            eta
                            wild
                      } in
                      (\ (conn :: Database.PostgreSQL.Simple.Internal.Connection)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case (m `cast`
                             (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                  <GHC.Types.Int>_R)
                               conn)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Database.PostgreSQL.Simple.Ok.Ok GHC.Types.Int>_R)
                              eta2 of ds1 { (#,#) ipv ipv1 ->
                       (# ipv,
                          case ipv1 of wild1 {
                            Database.PostgreSQL.Simple.Ok.Errors a1
                            -> Database.PostgreSQL.Simple.Ok.Errors
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 a1
                            Database.PostgreSQL.Simple.Ok.Ok a1
                            -> Database.PostgreSQL.Simple.Ok.Ok
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 (GHC.Base.Just @ GHC.Types.Int a1) } #) })
                        `cast`
                      (Trans
                           (<Database.PostgreSQL.Simple.Internal.Connection>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Database.PostgreSQL.Simple.Ok.Ok
                                             (GHC.Base.Maybe GHC.Types.Int)>_R))
                           (Sym (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                     <GHC.Base.Maybe GHC.Types.Int>_R))) }) -}
939333e2b4842bf1e81dc5447342e5ca
  $fFromRowVarcharIntDate3 ::
    Database.PostgreSQL.Simple.Internal.Field
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Base.Maybe
            (Database.PostgreSQL.Simple.Time.Implementation.Unbounded
               Data.Time.Calendar.Days.Day))
  {- Arity: 2, Strictness: <L,1*U(U(U,U),U,U)><S,1*U> -}
9f7031b0ed9e6472c7655532b18b6ba5
  $fFromRowVarcharIntDate4 ::
    Database.PostgreSQL.Simple.Internal.Field
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> Database.PostgreSQL.Simple.Internal.Conversion
         (GHC.Base.Maybe [GHC.Types.Char])
  {- Arity: 2, Strictness: <L,U(U(U,U),U,U)><S,1*U>,
     Unfolding: (\ (eta :: Database.PostgreSQL.Simple.Internal.Field)
                   (eta1 :: GHC.Base.Maybe Data.ByteString.Internal.ByteString) ->
                 case eta1 of wild {
                   GHC.Base.Nothing
                   -> (Database.PostgreSQL.Simple.FromField.$fFromFieldMaybe1
                         @ [GHC.Types.Char])
                        `cast`
                      (Trans
                           (<Database.PostgreSQL.Simple.Internal.Connection>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Database.PostgreSQL.Simple.Ok.Ok
                                             (GHC.Base.Maybe [GHC.Types.Char])>_R))
                           (Sym (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                     <GHC.Base.Maybe [GHC.Types.Char]>_R)))
                   GHC.Base.Just ds
                   -> let {
                        m :: Database.PostgreSQL.Simple.Internal.Conversion
                               [GHC.Types.Char]
                        = Database.PostgreSQL.Simple.FromField.$fFromField[]_$cfromField
                            eta
                            wild
                      } in
                      (\ (conn :: Database.PostgreSQL.Simple.Internal.Connection)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case (m `cast`
                             (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                  <[GHC.Types.Char]>_R)
                               conn)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <Database.PostgreSQL.Simple.Ok.Ok [GHC.Types.Char]>_R)
                              eta2 of ds1 { (#,#) ipv ipv1 ->
                       (# ipv,
                          case ipv1 of wild1 {
                            Database.PostgreSQL.Simple.Ok.Errors a1
                            -> Database.PostgreSQL.Simple.Ok.Errors
                                 @ (GHC.Base.Maybe [GHC.Types.Char])
                                 a1
                            Database.PostgreSQL.Simple.Ok.Ok a1
                            -> Database.PostgreSQL.Simple.Ok.Ok
                                 @ (GHC.Base.Maybe [GHC.Types.Char])
                                 (GHC.Base.Just @ [GHC.Types.Char] a1) } #) })
                        `cast`
                      (Trans
                           (<Database.PostgreSQL.Simple.Internal.Connection>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Database.PostgreSQL.Simple.Ok.Ok
                                             (GHC.Base.Maybe [GHC.Types.Char])>_R))
                           (Sym (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                     <GHC.Base.Maybe [GHC.Types.Char]>_R))) }) -}
719fe0303c7cdbfc069be9fb180376b7
  $fFromRowVarcharIntDate_$cfromRow ::
    Database.PostgreSQL.Simple.Internal.RowParser Main.VarcharIntDate
  {- Arity: 4,
     Strictness: <S(SS(SL)),1*U(U,U(U,U))><S(S),1*U(U)><L,U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fFromRowVarcharIntDate1
                  `cast`
                (Trans
                     (<Database.PostgreSQL.Simple.Internal.Row>_R
                      ->_R Trans
                               (<Database.PostgreSQL.LibPQ.Column>_R
                                ->_R Trans
                                         (<Database.PostgreSQL.Simple.Internal.Connection>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Database.PostgreSQL.Simple.Ok.Ok
                                                           (Main.VarcharIntDate,
                                                            Database.PostgreSQL.LibPQ.Column)>_R))
                                         (Sym (Database.PostgreSQL.Simple.Internal.N:Conversion[0]
                                                   <(Main.VarcharIntDate,
                                                     Database.PostgreSQL.LibPQ.Column)>_R)))
                               (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                         <Database.PostgreSQL.LibPQ.Column>_N
                                         <Database.PostgreSQL.Simple.Internal.Conversion>_R
                                         <Main.VarcharIntDate>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Database.PostgreSQL.Simple.Internal.Row>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       Database.PostgreSQL.LibPQ.Column
                                       Database.PostgreSQL.Simple.Internal.Conversion>_R
                                    <Main.VarcharIntDate>_N))
                          (Sym (Database.PostgreSQL.Simple.Internal.N:RowParser[0]) <Main.VarcharIntDate>_N))) -}
7453b7596b918ff0416141b67933db4c
  $fShowVarcharInt :: GHC.Show.Show Main.VarcharInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.VarcharInt
                  Main.$fShowVarcharInt_$cshowsPrec
                  Main.$fShowVarcharInt_$cshow
                  Main.$fShowVarcharInt_$cshowList -}
7453b7596b918ff0416141b67933db4c
  $fShowVarcharInt1 :: Main.VarcharInt -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w4 :: Main.VarcharInt) ->
                 case w4 of ww { Main.VarcharInt ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 }) -}
dc11275f45af07926a1a85481145b4d2
  $fShowVarcharInt2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
062760f2f912598357ca15dc78742db9
  $fShowVarcharInt3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ai = "#) -}
76a3ccbc44aab25f9678463f0d8602b8
  $fShowVarcharInt4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
9e72384decf7cda281be5bbf5fe18bd5
  $fShowVarcharInt5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "avc = "#) -}
80646e3a14cf5a224f466e9d505b8843
  $fShowVarcharInt6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VarcharInt {"#) -}
652260db1667b0a0710545682c5d4f5d
  $fShowVarcharInt7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
719fe0303c7cdbfc069be9fb180376b7
  $fShowVarcharIntDate :: GHC.Show.Show Main.VarcharIntDate
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.VarcharIntDate
                  Main.$fShowVarcharIntDate_$cshowsPrec
                  Main.$fShowVarcharIntDate_$cshow
                  Main.$fShowVarcharIntDate_$cshowList -}
719fe0303c7cdbfc069be9fb180376b7
  $fShowVarcharIntDate1 :: Main.VarcharIntDate -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w4 :: Main.VarcharIntDate) ->
                 case w4 of ww { Main.VarcharIntDate ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
6c6591aaf9b6ac8b4c713b5e7eb4031b
  $fShowVarcharIntDate2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "d = "#) -}
8db23e1d5d7d17a4b43196b904c43d14
  $fShowVarcharIntDate3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "i = "#) -}
2583645cd6896f4f0404281d3cfa51a9
  $fShowVarcharIntDate4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vc = "#) -}
2bbb4526366ab8311bd48723a89a2e0f
  $fShowVarcharIntDate5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VarcharIntDate {"#) -}
719fe0303c7cdbfc069be9fb180376b7
  $fShowVarcharIntDate_$cshow ::
    Main.VarcharIntDate -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.VarcharIntDate) ->
                 Main.$fShowVarcharIntDate_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
719fe0303c7cdbfc069be9fb180376b7
  $fShowVarcharIntDate_$cshowList ::
    [Main.VarcharIntDate] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.VarcharIntDate
                   Main.$fShowVarcharIntDate1) -}
719fe0303c7cdbfc069be9fb180376b7
  $fShowVarcharIntDate_$cshowsPrec ::
    GHC.Types.Int -> Main.VarcharIntDate -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w4 :: GHC.Types.Int) (w5 :: Main.VarcharIntDate) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Main.VarcharIntDate ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
25a1fdc87a326250ded8a90d014f22fb
  $fShowVarcharIntDate_$s$fShowUnbounded ::
    GHC.Show.Show
      (Database.PostgreSQL.Simple.Time.Implementation.Unbounded
         Data.Time.Calendar.Days.Day)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.PostgreSQL.Simple.Time.Implementation.Unbounded
                       Data.Time.Calendar.Days.Day)
                  (Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded_$cshowsPrec
                     @ Data.Time.Calendar.Days.Day
                     Data.Time.Calendar.Gregorian.$fShowDay)
                  Main.$fShowVarcharIntDate_$s$fShowUnbounded_$cshow
                  Main.$fShowVarcharIntDate_$s$fShowUnbounded_$cshowList -}
fcd5363ee4f41efb4def7871bf47a8fa
  $fShowVarcharIntDate_$s$fShowUnbounded_$cshow ::
    Database.PostgreSQL.Simple.Time.Implementation.Unbounded
      Data.Time.Calendar.Days.Day
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Database.PostgreSQL.Simple.Time.Implementation.Unbounded
                           Data.Time.Calendar.Days.Day) ->
                 Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded_$cshowsPrec
                   @ Data.Time.Calendar.Days.Day
                   Data.Time.Calendar.Gregorian.$fShowDay
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1e426b6b833af6a3ca4230cb86140a64
  $fShowVarcharIntDate_$s$fShowUnbounded_$cshowList ::
    [Database.PostgreSQL.Simple.Time.Implementation.Unbounded
       Data.Time.Calendar.Days.Day]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Database.PostgreSQL.Simple.Time.Implementation.Unbounded
                             Data.Time.Calendar.Days.Day])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Database.PostgreSQL.Simple.Time.Implementation.Unbounded
                        Data.Time.Calendar.Days.Day)
                   (Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded_$cshowsPrec
                      @ Data.Time.Calendar.Days.Day
                      Data.Time.Calendar.Gregorian.$fShowDay
                      GHC.Show.shows22)
                   ls
                   s) -}
7453b7596b918ff0416141b67933db4c
  $fShowVarcharInt_$cshow :: Main.VarcharInt -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.VarcharInt) ->
                 Main.$fShowVarcharInt_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7453b7596b918ff0416141b67933db4c
  $fShowVarcharInt_$cshowList :: [Main.VarcharInt] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.VarcharInt
                   Main.$fShowVarcharInt1) -}
7453b7596b918ff0416141b67933db4c
  $fShowVarcharInt_$cshowsPrec ::
    GHC.Types.Int -> Main.VarcharInt -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w4 :: GHC.Types.Int) (w5 :: Main.VarcharInt) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Main.VarcharInt ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 } }) -}
7453b7596b918ff0416141b67933db4c
  $fToRowVarcharInt ::
    Database.PostgreSQL.Simple.ToRow.ToRow Main.VarcharInt
  DFunId
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToRowVarcharInt_$ctoRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.ToRow.N:ToRow[0]
                          <Main.VarcharInt>_N)) -}
719fe0303c7cdbfc069be9fb180376b7
  $fToRowVarcharIntDate ::
    Database.PostgreSQL.Simple.ToRow.ToRow Main.VarcharIntDate
  DFunId
  {- Arity: 1, Strictness: <L,U(1*U,1*U,1*U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToRowVarcharIntDate_$ctoRow
                  `cast`
                (Sym (Database.PostgreSQL.Simple.ToRow.N:ToRow[0]
                          <Main.VarcharIntDate>_N)) -}
719fe0303c7cdbfc069be9fb180376b7
  $fToRowVarcharIntDate_$ctoRow ::
    Main.VarcharIntDate -> [Database.PostgreSQL.Simple.ToField.Action]
  {- Arity: 1, Strictness: <L,U(1*U,1*U,1*U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: Main.VarcharIntDate) ->
                 case Main.$w$ctoRow1 w4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ Database.PostgreSQL.Simple.ToField.Action
                   ww1
                   ww2 }) -}
7453b7596b918ff0416141b67933db4c
  $fToRowVarcharInt_$ctoRow ::
    Main.VarcharInt -> [Database.PostgreSQL.Simple.ToField.Action]
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: Main.VarcharInt) ->
                 case Main.$w$ctoRow w4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ Database.PostgreSQL.Simple.ToField.Action
                   ww1
                   ww2 }) -}
dc6e815235a89794acbf9775076b0a80
  $tc'VarcharInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3203271198540876743##
                   15763854164196532731##
                   Main.$trModule
                   Main.$tc'VarcharInt1) -}
046939452a75566c94630b5a3bc80fc6
  $tc'VarcharInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VarcharInt"#) -}
6ba39d593ad85691941cc839abbc3668
  $tc'VarcharIntDate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10363182432194104565##
                   11987754708387700328##
                   Main.$trModule
                   Main.$tc'VarcharIntDate1) -}
2f895de2c830bd22e21a10c4372a1c53
  $tc'VarcharIntDate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VarcharIntDate"#) -}
95b3611fef694d6ce0cc1125a215afb3
  $tcVarcharInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6503024190243749274##
                   4969230638717023267##
                   Main.$trModule
                   Main.$tcVarcharInt1) -}
1699876e831f5c80d4b58e9a7955a711
  $tcVarcharInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VarcharInt"#) -}
513764481c8cfedb1149dc35845f1439
  $tcVarcharIntDate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11672576177574230939##
                   8547241137007437620##
                   Main.$trModule
                   Main.$tcVarcharIntDate1) -}
da18e97d6284f0fae8aaa85db865048f
  $tcVarcharIntDate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VarcharIntDate"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
719fe0303c7cdbfc069be9fb180376b7
  $w$cfromRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> Database.PostgreSQL.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Database.PostgreSQL.Simple.Ok.Ok
            (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column) #)
  {- Arity: 6, Strictness: <S,U><S,U><L,U><S,U><L,U(U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Addr#)
                   (ww2 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww3 :: GHC.Prim.Int#)
                   (w4 :: Database.PostgreSQL.Simple.Internal.Connection)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Database.PostgreSQL.Simple.FromRow.$wfieldWith
                        @ (GHC.Base.Maybe GHC.Base.String)
                        Main.$fFromRowVarcharIntDate4
                        ww
                        ww1
                        ww2
                        ww3
                        w4
                        w5 of ds { (#,#) ipv ipv1 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> Database.PostgreSQL.Simple.Ok.Ok
                              (GHC.Base.Maybe Database.PostgreSQL.Simple.Time.Implementation.Date
                               -> Main.VarcharIntDate,
                               Database.PostgreSQL.LibPQ.Column)
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Database.PostgreSQL.Simple.Ok.Ok
                                 (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column) #)
                     {- Arity: 2, Strictness: <S,U><S,1*U> -}
                   = \ (ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv3 :: Database.PostgreSQL.Simple.Ok.Ok
                                  (GHC.Base.Maybe
                                     Database.PostgreSQL.Simple.Time.Implementation.Date
                                   -> Main.VarcharIntDate,
                                   Database.PostgreSQL.LibPQ.Column))[OneShot] ->
                     case ipv3 of wild {
                       Database.PostgreSQL.Simple.Ok.Errors err
                       -> (# ipv2,
                             Database.PostgreSQL.Simple.Ok.Errors
                               @ (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column)
                               err #)
                       Database.PostgreSQL.Simple.Ok.Ok a1
                       -> case a1 of wild1 { (,) f1 s' ->
                          case s'
                                 `cast`
                               (Trans
                                    (Database.PostgreSQL.LibPQ.N:Column[0])
                                    (Foreign.C.Types.N:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                          case Database.PostgreSQL.Simple.FromRow.$wfieldWith
                                 @ (GHC.Base.Maybe
                                      Database.PostgreSQL.Simple.Time.Implementation.Date)
                                 Main.$fFromRowVarcharIntDate3
                                 ww
                                 ww1
                                 ww2
                                 ww7
                                 w4
                                 ipv2 of ds1 { (#,#) ipv4 ipv5 ->
                          case ipv5 of wild2 {
                            Database.PostgreSQL.Simple.Ok.Errors err
                            -> (# ipv4,
                                  Database.PostgreSQL.Simple.Ok.Errors
                                    @ (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column)
                                    err #)
                            Database.PostgreSQL.Simple.Ok.Ok a2
                            -> case a2 of wild3 { (,) x s'' ->
                               (# ipv4,
                                  Database.PostgreSQL.Simple.Ok.Ok
                                    @ (Main.VarcharIntDate, Database.PostgreSQL.LibPQ.Column)
                                    (f1 x, s'') #) } } } } } }
                 } in
                 case ipv1 of wild {
                   Database.PostgreSQL.Simple.Ok.Errors a1
                   -> $j
                        ipv
                        (Database.PostgreSQL.Simple.Ok.Errors
                           @ (GHC.Base.Maybe
                                Database.PostgreSQL.Simple.Time.Implementation.Date
                              -> Main.VarcharIntDate,
                              Database.PostgreSQL.LibPQ.Column)
                           a1)
                   Database.PostgreSQL.Simple.Ok.Ok a1
                   -> case a1 of wild1 { (,) a2 s' ->
                      case s'
                             `cast`
                           (Trans
                                (Database.PostgreSQL.LibPQ.N:Column[0])
                                (Foreign.C.Types.N:CInt[0])) of ww6 { GHC.Int.I32# ww7 ->
                      case Database.PostgreSQL.Simple.FromRow.$wfieldWith
                             @ (GHC.Base.Maybe GHC.Types.Int)
                             Main.$fFromRowVarcharIntDate2
                             ww
                             ww1
                             ww2
                             ww7
                             w4
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Database.PostgreSQL.Simple.Ok.Errors err
                        -> $j
                             ipv2
                             (Database.PostgreSQL.Simple.Ok.Errors
                                @ (GHC.Base.Maybe
                                     Database.PostgreSQL.Simple.Time.Implementation.Date
                                   -> Main.VarcharIntDate,
                                   Database.PostgreSQL.LibPQ.Column)
                                err)
                        Database.PostgreSQL.Simple.Ok.Ok a3
                        -> case a3 of wild3 { (,) x s'' ->
                           $j
                             ipv2
                             (Database.PostgreSQL.Simple.Ok.Ok
                                @ (GHC.Base.Maybe
                                     Database.PostgreSQL.Simple.Time.Implementation.Date
                                   -> Main.VarcharIntDate,
                                   Database.PostgreSQL.LibPQ.Column)
                                (Main.VarcharIntDate a2 x, s'')) } } } } } } }) -}
181b54ad126edde6bb7309fb0cd88fdd
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe GHC.Base.String)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Main.$fShowVarcharInt7
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Main.$fShowVarcharInt7
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowVarcharInt6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowVarcharInt5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowVarcharInt4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowVarcharInt3
                                   (f1 (GHC.Base.++ @ GHC.Types.Char Main.$fShowVarcharInt2 x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
510202ed1103778c0fda4c8fb77ae595
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe
         Database.PostgreSQL.Simple.Time.Implementation.Date
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe GHC.Base.String)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe
                             Database.PostgreSQL.Simple.Time.Implementation.Date) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Main.$fShowVarcharInt7
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Main.$fShowVarcharInt7
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Database.PostgreSQL.Simple.Time.Implementation.Unbounded
                            Data.Time.Calendar.Days.Day)
                       Main.$fShowVarcharIntDate_$s$fShowUnbounded
                       Main.$fShowVarcharInt7
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowVarcharIntDate5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowVarcharIntDate4
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowVarcharInt4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Main.$fShowVarcharIntDate3
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowVarcharInt4
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Main.$fShowVarcharIntDate2
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Main.$fShowVarcharInt2
                                                  x)))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
7453b7596b918ff0416141b67933db4c
  $w$ctoRow ::
    Main.VarcharInt
    -> (# Database.PostgreSQL.Simple.ToField.Action,
          [Database.PostgreSQL.Simple.ToField.Action] #)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w4 :: Main.VarcharInt) ->
                 (# case w4 of wild { Main.VarcharInt ds ds1 ->
                    case ds of wild1 {
                      GHC.Base.Nothing -> Database.PostgreSQL.Simple.ToField.renderNull
                      GHC.Base.Just a1
                      -> Database.PostgreSQL.Simple.ToField.Escape
                           (Data.ByteString.Lazy.toStrict
                              (Data.ByteString.Builder.toLazyByteString
                                 (Data.ByteString.Builder.Prim.primMapListBounded
                                    @ GHC.Types.Char
                                    Data.ByteString.Builder.Prim.charUtf8
                                    a1))) } },
                    GHC.Types.:
                      @ Database.PostgreSQL.Simple.ToField.Action
                      (case w4 of wild { Main.VarcharInt ds ds1 ->
                       case ds1 of wild1 {
                         GHC.Base.Nothing -> Database.PostgreSQL.Simple.ToField.renderNull
                         GHC.Base.Just a1
                         -> Database.PostgreSQL.Simple.ToField.Plain
                              (Data.ByteString.Builder.Prim.primBounded
                                 @ GHC.Types.Int
                                 Data.ByteString.Builder.Prim.ASCII.intDec
                                 a1) } })
                      (GHC.Types.[] @ Database.PostgreSQL.Simple.ToField.Action) #)) -}
719fe0303c7cdbfc069be9fb180376b7
  $w$ctoRow1 ::
    Main.VarcharIntDate
    -> (# Database.PostgreSQL.Simple.ToField.Action,
          [Database.PostgreSQL.Simple.ToField.Action] #)
  {- Arity: 1, Strictness: <L,U(1*U,1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w4 :: Main.VarcharIntDate) ->
                 (# case w4 of wild { Main.VarcharIntDate ds ds1 ds2 ->
                    case ds of wild1 {
                      GHC.Base.Nothing -> Database.PostgreSQL.Simple.ToField.renderNull
                      GHC.Base.Just a1
                      -> Database.PostgreSQL.Simple.ToField.Escape
                           (Data.ByteString.Lazy.toStrict
                              (Data.ByteString.Builder.toLazyByteString
                                 (Data.ByteString.Builder.Prim.primMapListBounded
                                    @ GHC.Types.Char
                                    Data.ByteString.Builder.Prim.charUtf8
                                    a1))) } },
                    GHC.Types.:
                      @ Database.PostgreSQL.Simple.ToField.Action
                      (case w4 of wild { Main.VarcharIntDate ds ds1 ds2 ->
                       case ds1 of wild1 {
                         GHC.Base.Nothing -> Database.PostgreSQL.Simple.ToField.renderNull
                         GHC.Base.Just a1
                         -> Database.PostgreSQL.Simple.ToField.Plain
                              (Data.ByteString.Builder.Prim.primBounded
                                 @ GHC.Types.Int
                                 Data.ByteString.Builder.Prim.ASCII.intDec
                                 a1) } })
                      (GHC.Types.:
                         @ Database.PostgreSQL.Simple.ToField.Action
                         (case w4 of wild { Main.VarcharIntDate ds ds1 ds2 ->
                          case ds2 of wild1 {
                            GHC.Base.Nothing -> Database.PostgreSQL.Simple.ToField.renderNull
                            GHC.Base.Just a1
                            -> Database.PostgreSQL.Simple.ToField.Plain
                                 (\ @ r
                                    (eta :: Data.ByteString.Builder.Internal.BuildStep r)
                                    (eta1 :: Data.ByteString.Builder.Internal.BufferRange)
                                    (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case eta1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                  let {
                                    w5 :: Data.ByteString.Builder.Internal.BufferRange
                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                Data.ByteString.Builder.Internal.BuildSignal r #)
                                      {- Arity: 2 -}
                                    = Database.PostgreSQL.Simple.ToField.inQuotes2 @ r eta
                                  } in
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<# (GHC.Prim.minusAddr# ww2 ww1) 1#) of wild2 {
                                    GHC.Types.False
                                    -> case GHC.Prim.writeWord8OffAddr#
                                              @ GHC.Prim.RealWorld
                                              ww1
                                              0#
                                              39##
                                              eta2 of s2 { DEFAULT ->
                                       Database.PostgreSQL.Simple.Time.Implementation.$wdateToBuilder
                                         a1
                                         @ r
                                         w5
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R))
                                         (GHC.Prim.plusAddr# ww1 1#)
                                         ww2
                                         s2 }
                                    GHC.Types.True
                                    -> (# eta2,
                                          Data.ByteString.Builder.Internal.BufferFull
                                            @ r
                                            1#
                                            ww1
                                            (\ (ds3 :: Data.ByteString.Builder.Internal.BufferRange)
                                               (eta3 :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                             case ds3 of wild3 { Data.ByteString.Builder.Internal.BufferRange dt3 dt4 ->
                                             case GHC.Prim.writeWord8OffAddr#
                                                    @ GHC.Prim.RealWorld
                                                    dt3
                                                    0#
                                                    39##
                                                    eta3 of s2 { DEFAULT ->
                                             Database.PostgreSQL.Simple.Time.Implementation.$wdateToBuilder
                                               a1
                                               @ r
                                               w5
                                                 `cast`
                                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <Data.ByteString.Builder.Internal.BuildSignal
                                                                 r>_R))
                                               (GHC.Prim.plusAddr# dt3 1#)
                                               dt4
                                               s2 } })
                                              `cast`
                                            (<Data.ByteString.Builder.Internal.BufferRange>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Data.ByteString.Builder.Internal.BuildSignal
                                                              r>_R)) #) } })
                                   `cast`
                                 (Trans
                                      (forall (r :: <*>_N).
                                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <Data.ByteString.Builder.Internal.BuildSignal
                                                        r>_R))
                                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) } })
                         (GHC.Types.[] @ Database.PostgreSQL.Simple.ToField.Action)) #)) -}
7453b7596b918ff0416141b67933db4c
  data VarcharInt
    = VarcharInt {avc :: GHC.Base.Maybe GHC.Base.String,
                  ai :: GHC.Base.Maybe GHC.Types.Int}
719fe0303c7cdbfc069be9fb180376b7
  data VarcharIntDate
    = VarcharIntDate {vc :: GHC.Base.Maybe GHC.Base.String,
                      i :: GHC.Base.Maybe GHC.Types.Int,
                      d :: GHC.Base.Maybe
                             Database.PostgreSQL.Simple.Time.Implementation.Date}
dd27da213d204ce27376a9b1c1d4bc4f
  addVarcharInt ::
    Database.PostgreSQL.Simple.Internal.Connection
    -> Main.VarcharInt -> GHC.Types.IO GHC.Int.Int64
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addVarcharInt1
                  `cast`
                (<Database.PostgreSQL.Simple.Internal.Connection>_R
                 ->_R <Main.VarcharInt>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)) -}
fc106c924ade7cc7013cd85e55208cef
  addVarcharInt1 ::
    Database.PostgreSQL.Simple.Internal.Connection
    -> Main.VarcharInt
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Int.Int64 #)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Database.PostgreSQL.Simple.Internal.Connection)
                   (vci :: Main.VarcharInt)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Database.PostgreSQL.Simple.execute1
                   @ Main.VarcharInt
                   Main.$fToRowVarcharInt_$ctoRow
                     `cast`
                   (Sym (Database.PostgreSQL.Simple.ToRow.N:ToRow[0]
                             <Main.VarcharInt>_N))
                   c
                   Main.addVarcharInt2
                     `cast`
                   (Sym (Database.PostgreSQL.Simple.Types.N:Query[0]))
                   vci
                   eta) -}
064f5b4c412eceb6e27744b3266f83da
  addVarcharInt2 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.toStrict
                   Main.addVarcharInt3) -}
9697b489fe655b972054345b2109ef21
  addVarcharInt3 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   Main.addVarcharInt4
                     `cast`
                   (Trans
                        (forall (r :: <*>_N).
                         <Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)>_R
                         ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                        (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))) -}
b96f7202f73b2f0b33b23cf21e6c9aa4
  addVarcharInt4 ::
    (Data.ByteString.Builder.Internal.BufferRange
     -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> Data.ByteString.Builder.Internal.BufferRange
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 3,
     Unfolding: (\ @ r
                   (w4 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
                   (w5 :: Data.ByteString.Builder.Internal.BufferRange)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w5 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                 Main.addVarcharInt6 @ r Main.addVarcharInt5 w4 ww1 ww2 w6 }) -}
c5a7b76fb5485d512674f94fa87cafe8
  addVarcharInt5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "INSERT INTO varintdate (vc,i) VALUES (?,?)"#) -}
eef411b51dae80e831cb228e2355f261
  addVarcharInt6 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><S,U><L,U><S,U>, Inline: [0] -}
4fc4c98e0f0286161f06cb92c8fcb2e8
  ai :: Main.VarcharInt -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Main.VarcharInt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VarcharInt) ->
                 case ds of wild { Main.VarcharInt ds1 ds2 -> ds2 }) -}
bab24eeddd103fae9f2534f4b3c3aef0
  avc :: Main.VarcharInt -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Main.VarcharInt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VarcharInt) ->
                 case ds of wild { Main.VarcharInt ds1 ds2 -> ds1 }) -}
62b04c59098d5951f719ab2302db8bf2
  d ::
    Main.VarcharIntDate
    -> GHC.Base.Maybe
         Database.PostgreSQL.Simple.Time.Implementation.Date
  RecSel Left Main.VarcharIntDate
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VarcharIntDate) ->
                 case ds of wild { Main.VarcharIntDate ds1 ds2 ds3 -> ds3 }) -}
bd69ed50e5cadeb2683232e90ed77cfa
  i :: Main.VarcharIntDate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Main.VarcharIntDate
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VarcharIntDate) ->
                 case ds of wild { Main.VarcharIntDate ds1 ds2 ds3 -> ds2 }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f4a279271af0c6238d4e549f77516f9a
  vc :: Main.VarcharIntDate -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Main.VarcharIntDate
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.VarcharIntDate) ->
                 case ds of wild { Main.VarcharIntDate ds1 ds2 ds3 -> ds1 }) -}
instance Database.PostgreSQL.Simple.FromRow.FromRow [Main.VarcharIntDate]
  = Main.$fFromRowVarcharIntDate
instance GHC.Show.Show [Main.VarcharInt] = Main.$fShowVarcharInt
instance GHC.Show.Show [Main.VarcharIntDate]
  = Main.$fShowVarcharIntDate
instance Database.PostgreSQL.Simple.ToRow.ToRow [Main.VarcharInt]
  = Main.$fToRowVarcharInt
instance Database.PostgreSQL.Simple.ToRow.ToRow [Main.VarcharIntDate]
  = Main.$fToRowVarcharIntDate
"SPEC/Main $fShowUnbounded @ Day" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                               Data.Time.Calendar.Days.Day)
  Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded @ Data.Time.Calendar.Days.Day
                                                                 $dShow
  = Main.$fShowVarcharIntDate_$s$fShowUnbounded
"SPEC/Main $fShowUnbounded_$cshow @ Day" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      Data.Time.Calendar.Days.Day)
  Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded_$cshow @ Data.Time.Calendar.Days.Day
                                                                        $dShow
  = Main.$fShowVarcharIntDate_$s$fShowUnbounded_$cshow
"SPEC/Main $fShowUnbounded_$cshowList @ Day" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                          Data.Time.Calendar.Days.Day)
  Database.PostgreSQL.Simple.Time.Implementation.$fShowUnbounded_$cshowList @ Data.Time.Calendar.Days.Day
                                                                            $dShow
  = Main.$fShowVarcharIntDate_$s$fShowUnbounded_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

